{"version":3,"sources":["compnents/card/card.component.jsx","compnents/card-list/card-list.component.jsx","compnents/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","monsterID","mail","CardList","monsters","map","monster","index","key","id","email","SearchBox","placeholder","onChange","handleChange","type","App","e","setState","searchField","target","value","state","pageTitle","fetch","then","response","json","this","filteredMonsters","filter","toLowerCase","trim","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,MAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAG,+BAA0BJ,EAAMK,UAAhC,4BACzB,4BAAKL,EAAMG,MACX,2BAAIH,EAAMM,SCJTC,G,MAAW,SAACP,GACrB,OACI,yBAAKC,UAAU,aACVD,EAAMQ,SAASC,KAAI,SAACC,EAASC,GAC1B,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLN,UAAWK,EAAQG,GACnBV,KAAMO,EAAQP,KACdG,KAAMI,EAAQI,cCVzBC,G,MAAY,SAACf,GACtB,OACI,2BACIC,UAAU,SACVe,YAAahB,EAAMgB,YACnBC,SAAUjB,EAAMkB,aAChBC,KAAK,aCmCFC,G,wDAtCb,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IAeRkB,aAAe,SAACG,GACd,OAAO,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAd5C,EAAKC,MAAQ,CACXC,UAAW,mBACXnB,SAAU,GACVe,YAAa,IANC,E,gEAUE,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAACC,GAAc,OAAOA,EAASC,UACpCF,MAAK,SAACnB,GAAa,OAAO,EAAKY,SAAS,CAACd,SAAUE,S,+BAO7C,IAAD,EAC0BsB,KAAKN,MAA9BlB,EADD,EACCA,SAAUe,EADX,EACWA,YACXU,EAAmBzB,EAAS0B,QAAO,SAAC1B,GACxC,OAAOA,EAASL,KAAKgC,cAAcC,OAAOC,SAASd,EAAYe,oBAAoBF,WAErF,OACE,yBAAKnC,UAAU,OACb,wBAAIA,UAAU,SAAS+B,KAAKN,MAAMC,WAClC,kBAAC,EAAD,CACEX,YAAY,iBACZE,aAAcc,KAAKd,eAErB,kBAAC,EAAD,CAAUV,SAAUyB,S,GAjCVM,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0697f69.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>{ \r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt={props.name} src={`https://robohash.org/${props.monsterID}/set=set2&size=180x180`} />\r\n            <h2>{props.name}</h2>\r\n            <p>{props.mail}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((monster, index) => {\r\n                return(\r\n                    <Card \r\n                        key={index}\r\n                        monsterID={monster.id}\r\n                        name={monster.name}\r\n                        mail={monster.email}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => {\r\n    return(\r\n        <input \r\n            className=\"search\"\r\n            placeholder={props.placeholder}\r\n            onChange={props.handleChange}\r\n            type=\"search\"\r\n        />\r\n    )\r\n}","import React, {Component} from 'react';\nimport {CardList} from './compnents/card-list/card-list.component';\nimport {SearchBox} from './compnents/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      pageTitle: 'Monsters rolodex',\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => {return response.json()})\n    .then((monster) => {return this.setState({monsters: monster})})\n  }\n\n  handleChange = (e) => {\n    return this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter((monsters) => {\n      return monsters.name.toLowerCase().trim().includes(searchField.toLocaleLowerCase().trim())\n    })\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">{this.state.pageTitle}</h1>\n        <SearchBox \n          placeholder=\"Search monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}